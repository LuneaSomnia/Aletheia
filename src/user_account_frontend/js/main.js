import { AuthClient } from "@dfinity/auth-client";
import { Actor, HttpAgent } from "@dfinity/agent";

// --- Import ALL backend canister interfaces ---
// These are auto-generated by `dfx deploy`
import { idlFactory as user_account_idl } from "../../../.dfx/local/canisters/user_account_backend/user_account_backend.did.js";
import { idlFactory as aletheian_profile_idl } from "../../../.dfx/local/canisters/aletheian_profile_backend/aletheian_profile_backend.did.js";
import { idlFactory as claim_submission_idl } from "../../../.dfx/local/canisters/claim_submission_backend/claim_submission_backend.did.js";

// --- Get ALL canister IDs from environment variables ---
const userAccountCanisterId = process.env.CANISTER_ID_USER_ACCOUNT_BACKEND;
const aletheianProfileCanisterId = process.env.CANISTER_ID_ALETHEIAN_PROFILE_BACKEND;
const claimSubmissionCanisterId = process.env.CANISTER_ID_CLAIM_SUBMISSION_BACKEND;

// --- Global State ---
let authClient;
let userActor;
let aletheianActor;
let claimActor;

// --- DOM Element Selectors (for ALL views) ---
const masterLoginView = document.getElementById("master-login-view");
const userAppView = document.getElementById("user-app-view");
const aletheianAppView = document.getElementById("aletheian-app-view");

const loginUserButton = document.getElementById("login-user-button");
const loginAletheianButton = document.getElementById("login-aletheian-button");
const loginStatus = document.getElementById("login-status");

// ... (Add all other specific element selectors from all three old JS files here) ...


// --- INITIALIZATION ---
const init = async () => {
  authClient = await AuthClient.create();
  
  // Set up the main login buttons
  loginUserButton.onclick = () => handleLogin("user");
  loginAletheianButton.onclick = () => handleLogin("aletheian");

  // Check if user is already logged in from a previous session
  if (await authClient.isAuthenticated()) {
    // If they are, we need to know their role. We'll add a simple way to remember it.
    const lastRole = localStorage.getItem("aletheia_role");
    if (lastRole) {
        loadPortal(lastRole);
    }
  }
};

// --- AUTHENTICATION & NAVIGATION ---
const handleLogin = async (role) => {
    loginStatus.innerText = "Authenticating...";
    await authClient.login({
        identityProvider: "https://identity.ic0.app/#authorize",
        onSuccess: () => {
            localStorage.setItem("aletheia_role", role); // Remember the role
            loadPortal(role);
        },
        onError: (error) => { loginStatus.innerText = `Login failed: ${error}`; },
    });
};

const loadPortal = (role) => {
    const identity = authClient.getIdentity();
    const agent = new HttpAgent({ identity });

    // Hide the master login page
    masterLoginView.style.display = "none";

    if (role === "user") {
        // Create user actor and show user view
        userActor = Actor.createActor(user_account_idl, { agent, canisterId: userAccountCanisterId });
        claimActor = Actor.createActor(claim_submission_idl, { agent, canisterId: claimSubmissionCanisterId });
        userAppView.hidden = false;
        document.body.className = 'theme-user'; // Apply user theme
        setupUserDashboard(); // Run the setup logic for the user dashboard
    } else if (role === "aletheian") {
        // Create aletheian actor and show aletheian view
        aletheianActor = Actor.createActor(aletheian_profile_idl, { agent, canisterId: aletheianProfileCanisterId });
        aletheianAppView.hidden = false;
        document.body.className = 'theme-aletheian'; // Apply aletheian theme
        setupAletheianDashboard(); // Run the setup logic for the aletheian dashboard
    }
};

// --- USER PORTAL LOGIC ---
function setupUserDashboard() {
    // This function contains all the logic from your old user_account_frontend/js/main.js
    // and claim_submission_frontend/js/main.js
    
    // Example: fetch user profile
    userActor.getMyProfile().then(profile => {
        // update UI with profile...
    });

    // Example: setup tabs
    const userTabs = userAppView.querySelectorAll('.glass-tab');
    userTabs.forEach(tab => {
        tab.addEventListener('click', () => { /* ... tab switching logic ... */ });
    });

    // Example: setup claim submission form
    const claimForm = document.getElementById('claim-form');
    claimForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        // ... get form data ...
        await claimActor.submitClaim(/* ... data ... */);
        // ... update UI ...
    });
}

// --- ALETHEIAN PORTAL LOGIC ---
function setupAletheianDashboard() {
    // This function contains all the logic from your old aletheian_profile_frontend/js/main.js

    // Example: fetch aletheian profile
    aletheianActor.getMyProfile().then(result => {
        if (result.Ok) {
            // update UI with Aletheian profile stats, rank, badges...
        } else {
            // Handle case where user is not a registered Aletheian
            alert(result.Err);
        }
    });
}

// --- Start the application ---
init();
